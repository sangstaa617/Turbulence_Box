import random
import u3
import u6
import ue9
import numpy as np
import time
from LabJackDAC import LJTickDAC
import struct


class LJTickDAC:
    """Updates DACA and DACB on a LJTick-DAC connected to a U3, U6 or UE9."""
    EEPROM_ADDRESS = 0x50
    DAC_ADDRESS = 0x12

    def __init__(self, device, dioPin):
        """device: The object to an opened U3, U6 or UE9.
        dioPin: The digital I/O line that the LJTick-DAC's DIOA is connected to.
        """
        self.device = device

        # The pin numbers for the I2C command-response
        self.sclPin = dioPin
        self.sdaPin = self.sclPin + 1

        self.getCalConstants()

    def toDouble(self, buff):
        """Converts the 8 byte array into a floating point number.
        buff: An array with 8 bytes.
        """
        right, left = struct.unpack("<Ii", struct.pack("B" * 8, *buff[0:8]))
        return float(left) + float(right)/(2**32)

    def getCalConstants(self):
        """Loads or reloads the calibration constants for the LJTick-DAC.
        See datasheet for more info.
        """
        data = self.device.i2c(LJTickDAC.EEPROM_ADDRESS, [64],
                               NumI2CBytesToReceive=36, SDAPinNum=self.sdaPin,
                               SCLPinNum=self.sclPin)
        response = data['I2CBytes']
        self.slopeA = self.toDouble(response[0:8])
        self.offsetA = self.toDouble(response[8:16])
        self.slopeB = self.toDouble(response[16:24])
        self.offsetB = self.toDouble(response[24:32])

        if 255 in response:
            msg = "LJTick-DAC calibration constants seem off. Check that the " \
                  "LJTick-DAC is connected properly."
            raise Exception(msg)

    def update(self, dacA, dacB):
        """Updates the voltages on the LJTick-DAC.
        dacA: The DACA voltage to set.
        dacB: The DACB voltage to set.
        """
        binaryA = int(dacA*self.slopeA + self.offsetA)
        self.device.i2c(LJTickDAC.DAC_ADDRESS,
                        [48, binaryA // 256, binaryA % 256],
                        SDAPinNum=self.sdaPin, SCLPinNum=self.sclPin)
        binaryB = int(dacB*self.slopeB + self.offsetB)
        self.device.i2c(LJTickDAC.DAC_ADDRESS,
                        [49, binaryB // 256, binaryB % 256],
                        SDAPinNum=self.sdaPin, SCLPinNum=self.sclPin)

def openFirstFound():
    """Opens first found LabJack U6, U3 or UE9. Returns the device object on
    success or None if not found.
    """
    devices = [u6.U6, u3.U3, ue9.UE9]
    for device in devices:
        try:
            # Open the LabJack device
            return device()
        except:
            pass
    return None


# Open first found LabJack U6, U3 or UE9
dev = openFirstFound()
if dev is None:
    print("Unable to find or open a LabJack.")
    exit()
else:
    deviceTypes = {6: "U6", 3: "U3", 9: "UE9"}
    print("Found and opened a %s with serial # %s" %
          (deviceTypes[dev.devType], dev.serialNumber))

dev.getCalibrationData()

if dev.devType == 3:
    # For the U3, LJTick-DAC connected to FIO4 and FIO5.
    dioPin = 4
    # Configure FIO0 to FIO4 as analog inputs, and FIO04 to FIO7 as digital I/O.
    dev.configIO(FIOAnalog=0x0F)
else:
    # For the U6 and UE9, LJTick-DAC connected to FIO0 and FIO1.
    dioPin = 0

# ask the user for the time on
time_on = int(input("Enter the desired duration of the test in seconds: "))

# total tdac update time is ~11.5 ms, divide the total time by this to find n points
n = int(time_on // 0.0115)

# return a gaussian value based on mean, stdev, min, max
def boundGauss(object):
    mean, stdev, min, max = object[0], object[1], object[2], object[3]
    while True:
        val = np.random.normal(mean, stdev) # generate a gaussian random value
        if min < val < max: # if it is within the bounds, use it
            break

    return int(val)

amp = input("Enter the desired amplitude in volts (default is 5): ")

# create a square wave that changes in frequency with time
def randomSquareWave(total_num_points, period_object):
    point_count = 0
    square_wave_list = []
    while point_count < total_num_points:
        frequency_pick = random.randint(1, 8)
        period_pick = boundGauss(period_object)
        if frequency_pick <= 4:
            square_wave_list += [amp, 0] * period_pick
            point_count += 2 * period_pick
        if 5 <= frequency_pick <= 6:
            square_wave_list += [amp, amp, 0, 0] * period_pick
            point_count += 4 * period_pick
        if frequency_pick == 7:
            square_wave_list += [amp, amp, amp, 0, 0, 0] * period_pick
            point_count += 6 * period_pick
        if frequency_pick == 8:
            square_wave_list += [amp, amp, amp, amp, 0, 0, 0, 0] * period_pick
            point_count += 8 * period_pick

    return square_wave_list

period_data = [2, 1/3, 0, 15] #[mean, stdev, min, max]


r1 = randomSquareWave(n, period_data)
r2 = randomSquareWave(n, period_data)
r3 = randomSquareWave(n, period_data)
r4 = randomSquareWave(n, period_data)
r5 = randomSquareWave(n, period_data)
r6 = randomSquareWave(n, period_data)
r7 = randomSquareWave(n, period_data)
r8 = randomSquareWave(n, period_data)


# create square wave lists of increasing frequency (on/off for 1, 2, 3, and 4 points)
p1 = [5*(i % 2) for i in range(n)]
p2 = [5 if i % 4 < 2 else 0 for i in range(n)]
p3 = [5 if i % 6 < 3 else 0 for i in range(n)]
p4 = [5 if i % 8 < 4 else 0 for i in range(n)]

# initialise the LJTick-DACs
tdac1 = LJTickDAC(dev, 0)
tdac2 = LJTickDAC(dev, 2)
tdac3 = LJTickDAC(dev, 8)
tdac4 = LJTickDAC(dev, 10)
tdac5 = LJTickDAC(dev, 12)
tdac6 = LJTickDAC(dev, 14)
tdac7 = LJTickDAC(dev, 16)
tdac8 = LJTickDAC(dev, 18)

mode = input("Select the desired test mode: \n" + "(1) Random \n" + "(2) Linear \n" + "(3) Constant \n")

if mode == "2":
    linform1 = []
    linform2 = []
    linform3 = []
    linform4 = []

    linform1 += [amp, 0] * n // 2

    linform2 += [amp, amp, 0, 0] * n // 4
    
    linform3 += [amp, amp, amp, 0, 0, 0] * n // 6

    linform4 += [amp, amp, amp, amp, 0, 0, 0, 0] * n // 8

if mode == "3":
    waveform = []
    pick = input("Select the desired frequency in Hz: \n" + "1. ~45 Hz \n" + "2. ~22.5 Hz\n " + "3. 15 Hz" + "4. 11.25 Hz")

    if pick == "1":
        waveform += [amp, 0] * n//2

    if pick == "2":
        waveform += [amp, amp, 0, 0] * n//4

    if pick == "3":
        waveform += [amp, amp, amp, 0, 0, 0] * n//6

    if pick == "4":
        waveform += [amp, amp, amp, amp, 0, 0, 0, 0] * n//8



if mode == "1":
    a = time.time()
    for i in range(n):
        # 8 channels at ~45 Hz (FIO0 - EIO2)
        # (a_side, b_side) of turbulence box
        tdac1.update(r1[i], r1[i])
        tdac2.update(r2[i], r2[i])
        tdac3.update(r3[i], r3[i])
        tdac4.update(r4[i], r4[i])

        # 4 channels at ~22.5 Hz (EIO4 - EIO6)
        tdac5.update(r5[i], r5[i])
        tdac6.update(r6[i], r6[i])

        # 2 channels at ~15 Hz (CIO0)
        tdac7.update(r7[i], r7[i])

        # 2 channels at ~11.25 Hz (CIO2)
        tdac8.update(r8[i], r8[i])

if mode == "2":
    a = time.time()
    for i in range(n):
        # 4 channels at ~45 Hz
        # (a_side, b_side) of turbulence box
        tdac1.update(linform1[i], linform1[i])
        tdac2.update(linform1[i], linform1[i])

        # 4 channels at ~22.5 Hz
        tdac3.update(linform2[i], linform2[i])
        tdac4.update(linform2[i], linform2[i])

        # 4 channels at ~15 Hz
        tdac5.update(linform3[i], linform3[i])
        tdac6.update(linform3[i], linform3[i])

        # 4 channels at ~11.25 Hz
        tdac7.update(linform4[i], linform4[i])
        tdac8.update(linform4[i], linform4[i])

if mode == "3":
    a = time.time()
    for i in range(n):
        # all channels at selected frequency
        # (a_side, b_side) of turbulence box
        tdac1.update(waveform[i], waveform[i])
        tdac2.update(waveform[i], waveform[i])

        tdac3.update(waveform[i], waveform[i])
        tdac4.update(waveform[i], waveform[i])

        tdac5.update(waveform[i], waveform[i])
        tdac6.update(waveform[i], waveform[i])

        tdac7.update(waveform[i], waveform[i])
        tdac8.update(waveform[i], waveform[i])

print(time.time() - a)

dev.close()
